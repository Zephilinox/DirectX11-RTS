Texture2D shader_texture;
SamplerState sample_type;

cbuffer Light
{
	float4 diffuse_colour;
	float3 light_direction;
	float padding;
}

struct Pixel
{
	float4 position: SV_POSITION;
	float4 colour: COLOR;
	float2 tex: TEXCOORD;
	float3 normal: NORMAL;
};

float4 ColourPixelShader(Pixel pixel) : SV_TARGET
{
	float4 texture_colour = shader_texture.Sample(sample_type, pixel.tex);
	float4 colour = float4(0.5f, 0.5f, 0.5f, 1.0f);
	float inverse_light_dir = -light_direction;
	float light_intensity = saturate(dot(pixel.normal, inverse_light_dir));
	if (light_intensity > 0.0f)
	{
		colour += (diffuse_colour * light_intensity);
	}
	colour = saturate(colour);
	colour = colour * pixel.colour;
	colour = colour * texture_colour;
	return colour;

	float4 normal_as_colour;
	normal_as_colour = float4(abs(pixel.normal.x), abs(pixel.normal.y), abs(pixel.normal.z), 1);
	float4 light_direction_as_colour;
	light_direction_as_colour = float4(abs(light_direction.x), abs(light_direction.y), abs(light_direction.z), 1);
	return normal_as_colour;
}